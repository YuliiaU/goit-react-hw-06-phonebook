{"version":3,"sources":["components/Form/Form.module.css","components/Contacts/Contacts.module.css","components/Container/Container.module.css","components/Container/Container.js","redux/contacts-action.js","redux/contacts-selection.js","components/Form/Form.js","components/Contacts/Contacts.js","components/Filter/Filter.js","App.js","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","styles","exportedObject","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","ChangeFilter","getContacts","state","contacts","items","connect","dispatch","onSubmit","contactsAction","useState","setName","setNumber","useSelector","useDispatch","handleChange","event","target","value","reset","nameInputId","numberInputId","e","preventDefault","some","contact","alert","style","form","htmlFor","onChange","type","pattern","title","required","button","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","onDeleteContacts","map","item","onClick","App","setContacts","setFilter","useEffect","localStorage","getItem","JSON","parse","prevState","setItem","stringify","visibleContacts","data","find","evt","deletedContactId","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.f19becfe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3tASP\",\"button\":\"Form_button__2IaHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Contacts_button__2kvot\",\"item\":\"Contacts_item__24ZN9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__fP2TO\"};","import PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={styles.Container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n\nexport default Container;\n","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nconst deleteContact = createAction('contacts/delete');\r\nconst ChangeFilter = createAction('contacts/changeFilter');\r\n\r\nconst exportedObject = {\r\n  addContact,\r\n  deleteContact,\r\n  ChangeFilter,\r\n};\r\n\r\nexport default exportedObject;","export const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;","import { useState } from 'react';\nimport style from './Form.module.css';\nimport shortid from 'shortid';\nimport { connect } from 'react-redux';\nimport contactsAction from '../../redux/contacts-action';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../redux/contacts-selection';\n\n\nfunction Form() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n    const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n       if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(contactsAction.addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  return (\n    <form onSubmit={handleSubmit} className={style.form}>\n      <label htmlFor={nameInputId}>\n        <p>Name</p>\n        <input\n          value={name}\n          onChange={handleChange}\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label htmlFor={numberInputId}>\n        <p>Number</p>\n\n        <input\n          value={number}\n          onChange={handleChange}\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={style.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(contactsAction.addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(Form);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Contacts.module.css';\nimport { connect } from 'react-redux';\nimport contactsAction from '../../redux/contacts-action';\n\nconst Contacts = ({ contacts, onDeleteContacts }) => (\n\n  \n  <ul>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={style.item}>\n        <p>{name}</p>\n        <span>{number}</span>\n        <button\n          type=\"button\"\n          onClick={() => onDeleteContacts(id)}\n          className={style.button}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired)),\n  onDeleteContacts: PropTypes.func.isRequired,\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: id => dispatch(contactsAction.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import style from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport contactsAction from '../../redux/contacts-action';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    <p>Find contacts by name</p>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsAction.ChangeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { useState, useEffect } from 'react';\n\nimport Container from './components/Container';\nimport Form from './components/Form';\nimport Contacts from './components/Contacts';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    if (localStorage.getItem('contacts')) {\n      setContacts(JSON.parse(localStorage.getItem('contacts')));\n    }\n  }, []);\n\n  useEffect(\n    prevState => {\n      if (contacts !== prevState) {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n      }\n    },\n    [contacts],\n  );\n\n  const formSubmitHandler = data => {\n    if (contacts.find(contact => contact.name === data.name)) {\n      alert(`${data.name} is already in contacts`);\n      return;\n    }\n    setContacts(prevState => [data, ...prevState]);\n  };\n\n  const deleteContact = deletedContactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== deletedContactId),\n    );\n  };\n\n  const changeFilter = evt => {\n    setFilter(evt.target.value);\n  };\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Form onSubmit={formSubmitHandler} />\n\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n\n      <Contacts contacts={visibleContacts} onDeleteContacts={deleteContact} />\n    </Container>\n  );\n}\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-action';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.ChangeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst exportedObject = {\r\n  store,\r\n  persistor,\r\n};\r\n\r\nexport default exportedObject;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport './style.css';\nimport {} from './redux/contacts-types';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}